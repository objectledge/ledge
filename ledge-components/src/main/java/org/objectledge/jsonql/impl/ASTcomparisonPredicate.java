/* Generated By:JJTree: Do not edit this line. ASTcomparisonPredicate.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.objectledge.jsonql.impl;

public class ASTcomparisonPredicate
    extends RelationPredicate
{
    private Operator operator;

    private int value;

    public ASTcomparisonPredicate(int id)
    {
        super(id);
    }

    public ASTcomparisonPredicate(JSONQL p, int id)
    {
        super(p, id);
    }

    /** Accept the visitor. **/
    public Object jjtAccept(JSONQLVisitor visitor, org.objectledge.jsonql.EvaluationContext data)
    {
        return visitor.visit(this, data);
    }

    public Operator getOperator()
    {
        return operator;
    }

    public void setOperator(Token token)
    {
        this.operator = Operator.parse(token.image);
    }

    public int getValue()
    {
        return value;
    }

    public void setValue(Token token)
    {
        this.value = Integer.parseInt(token.image);
    }

    @Override
    public String toString()
    {
        return super.toString() + " " + operator.getImage() + " " + value;
    }

    public enum Operator
    {
        LESS("<")
        {
            public boolean compare(int lhs, int rhs)
            {
                return lhs < rhs;
            }
        },
        GREATER(">")
        {
            public boolean compare(int lhs, int rhs)
            {
                return lhs > rhs;
            }
        },
        LESS_EQUAL("<=")
        {
            public boolean compare(int lhs, int rhs)
            {
                return lhs <= rhs;
            }
        },
        GREATER_EQUAL(">=")
        {
            public boolean compare(int lhs, int rhs)
            {
                return lhs >= rhs;
            }
        };

        Operator(String image)
        {
            this.image = image;
        }

        private String image;

        public abstract boolean compare(int lhs, int rhs);

        public String getImage()
        {
            return image;
        }

        public static Operator parse(String image)
        {
            for(Operator o : values())
            {
                if(o.image.equals(image))
                {
                    return o;
                }
            }
            throw new IllegalArgumentException("illegal operator " + image);
        }
    }
}
/* JavaCC - OriginalChecksum=23ad43ef00ddf163b1a98d9cb6e4b82a (do not edit this line) */
