options{  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = true;  IGNORE_CASE = true;  CACHE_TOKENS = true;  STATIC = false;  MULTI = true;  VISITOR = true;  LOOKAHEAD = 2;  FORCE_LA_CHECK = true;  DEBUG_PARSER = false;  DEBUG_TOKEN_MANAGER = false;  VISITOR_DATA_TYPE = "org.objectledge.jsonql.EvaluationContext";}PARSER_BEGIN(JSONQL)package org.objectledge.jsonql.impl;public class JSONQL{}PARSER_END(JSONQL)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{  < AND : "and" >| < OR : "or" >| < NOT : "not" >| < IN : "in" >| < IDENTIFIER : [ "a"-"z", "_" ] ([ "a"-"z", "0"-"9", "_" ])* >| < STRING_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < NUMERIC_LITERAL : ([ "0"-"9" ])+ >| < PATTERN :    "/"    (      ~[ "/" ]    | "\\/"    )*    "/" >}ASTpredicate onlyPredicate() #void :{  ASTpredicate p;}{  p = predicate() < EOF >  {    return p;  }}ASTvalue onlyValue() #void :{  ASTvalue v;}{  v = value() < EOF >  {    return v;  }}ASTpredicate predicate() :{}{  disjunction()  {    return jjtThis;  }}void disjunction() #void :{}{  (    conjunction()    (      "or" conjunction()    )*  ) #disjunction(>1)}void conjunction() #void :{}{  (    simplePredicate()    (      "and" simplePredicate()    )*  ) #conjunction(>1)}void simplePredicate() #void :{}{  negation()| primaryPredicate()}void negation() :{}{  "not" primaryPredicate()}void primaryPredicate() #void :{}{  relationPredicate()|  (    "(" disjunction() ")"  )}void relationPredicate() #void :{  ASTvalue value;}{  value = value()  {	jjtree.popNode();  }  (    equalityPredicate(value)  | matchPredicate(value)  | containmentPredicate(value)  )}void equalityPredicate(ASTvalue value) :{}{  "=" < STRING_LITERAL >  {    jjtThis.setLhs(value);    jjtThis.setValue(token);  }}void matchPredicate(ASTvalue value) :{}{  "~" < PATTERN >  {    jjtThis.setLhs(value);    jjtThis.setPattern(token);  }}void containmentPredicate(ASTvalue value) :{}{  "in" "{" < STRING_LITERAL >  {    jjtThis.setLhs(value);    jjtThis.addValue(token);  }  (    "," < STRING_LITERAL >    {      jjtThis.addValue(token);    }  )*  "}"}ASTvalue value() :{}{  (    fieldSelection()  | elementSelection()  )  (    "." fieldSelection()  | elementSelection()  )*  {    return jjtThis;  }}void fieldSelection() :{}{  < IDENTIFIER >  {    jjtThis.setIdentifier(token);  }}void elementSelection() :{}{  "["  (    < NUMERIC_LITERAL >    {      jjtThis.setKind(ASTelementSelection.Kind.INDEX);      jjtThis.setIndex(token);    }  | < STRING_LITERAL >    {      jjtThis.setKind(ASTelementSelection.Kind.FIELD);      jjtThis.setIdentifier(token);    }  | predicate()    {      jjtThis.setKind(ASTelementSelection.Kind.PREDICATE);    }  )  "]"}<* >TOKEN :{  < UNEXPECTED_CHARACTER : ~[ ] >}