options{  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = true;  IGNORE_CASE = true;  CACHE_TOKENS = true;  STATIC = false;  MULTI = true;  VISITOR = true;  FORCE_LA_CHECK = true;  LOOKAHEAD= 1;  DEBUG_PARSER = false;  DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(RateLimitRules)package org.objectledge.web.ratelimit.rules;public class RateLimitRules{}PARSER_END(RateLimitRules)<* >SKIP :{  " "| "\t"| "\n"| "\r"}< DEFAULT >TOKEN :{  < IPV4 : ([ "0"-"9", "." ])+ >| < IPV6 : ([ "0"-"9", "a"-"f", "A"-"F", ":" ])+ >| < QUOTED :    "\"" (~[ "\"" ])* "\""    (      "\"" (~[ "\"" ])* "\""    )* >| < DASHED :    "/"    (      ~[ "/" ]    | "\\/"    )*    "/" >| < HEADER :    (      [ "A"-"Z" ]    | [ "a"-"z" ]    | "-"    )+ >| < SLASH : "/" > : MATCH_NUM| < GT : ">" > : MATCH_NUM| < IMPLIES : "=>" > : MATCH_ACTION}< MATCH_NUM >TOKEN :{  < NUM : ([ "0"-"9" ])+ > : DEFAULT}< MATCH_ACTION >TOKEN :{  < ACTION : ([ "a"-"z" ])+ > : DEFAULT}void predicateIp() :{}{  (    < IPV4 >  | < IPV6 >  )  {    jjtThis.setAddress(token);  }}void predicateIpMatch() :{  Token address;}{  (    < IPV4 >  | < IPV6 >  )  {    address = token;  }  < SLASH > < NUM >  {    jjtThis.setAddressBlock(address, token);  }}void ipPredicates() #void :{}{  "=" predicateIp()| "~" predicateIpMatch()}void predicateHost() :{}{  < QUOTED >  {    jjtThis.setName(token);  }}void predicateHostMatch() :{}{  < DASHED >  {    jjtThis.setPattern(token);  }}void hostPredicates() #void :{}{  "=" predicateHost()| "~" predicateHostMatch()}void predicateHits() :{}{  ">" < NUM >  {    jjtThis.setValue(token);  }}void predicateHeader(Token header) :{}{  < QUOTED >  {    jjtThis.setHeader(header);    jjtThis.setValue(token);  }}void predicateHeaderMatch(Token header) :{}{  < DASHED >  {    jjtThis.setHeader(header);    jjtThis.setPattern(token);  }}void headerPredicates(Token header) #void :{}{  "=" predicateHeader(header)| "~" predicateHeaderMatch(header)}void basicPredicate() #void :{}{  < HEADER >  {    if (token.image.equals("IP")) ipPredicates();    else if (token.image.equals("Host")) hostPredicates();    else if (token.image.equals("Hits")) predicateHits();    else headerPredicates(token);  }}void predicate() #void :{}{  basicPredicate()| negation()|  (    "(" disjunction() ")"  )}void negation() :{}{  "!" predicate()}void conjunction() #void :{}{  (    predicate()    (      "&&" predicate()    )*  ) #conjunction(>1)}void disjunction() #void :{}{  (    conjunction()    (      "||" conjunction()    )*  ) #disjunction(>1)}ASTrule rule() :{}{  (    disjunction() "=>"    {      token_source.SwitchTo(RateLimitRulesConstants.MATCH_ACTION);    }    < ACTION > < EOF >  )  {    return jjtThis;  }}<* >TOKEN :{  < UNEXPECTED_CHARACTER : ~[ ] >}

